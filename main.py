from flask import Flask, request, jsonify, Blueprint, render_template, session, url_for, redirect
from google.cloud import datastore
import json
from jwtverify import AuthError, verify_jwt
from flask_cors import cross_origin
from functools import wraps
from six import *
from jose import jwt
from os import environ as env
from werkzeug.exceptions import HTTPException
from dotenv import load_dotenv, find_dotenv
from authlib.integrations.flask_client import OAuth
from urllib.parse import quote_plus, urlencode

from db import *
from responsehelper import *
import boats, loads
from credentials import CLIENT_ID, CLIENT_SECRET, DOMAIN

app = Flask(__name__)
app.secret_key = '4a912900ef86d57e1ce2795c174e9edfe9de466c98414e9f9011817a03aed261' #generated by openssl rand -hex 32
app.register_blueprint(boats.bp)
app.register_blueprint(loads.bp)
client = datastore.Client()
oauth = OAuth(app)
auth0 = oauth.register(
    "auth0",
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET,
    api_base_url="https://" + DOMAIN,
    access_token_url="https://" + DOMAIN + "/oauth/token",
    authorize_url="https://" + DOMAIN + "/authorize",
    client_kwargs={
        'scope': 'openid profile email',
    },
    server_metadata_url=f'https://{DOMAIN}/.well-known/openid-configuration'
)


@app.route('/')
def home():
    token = request.args.get('token')
    return render_template('index.html', buttonResponse=token)        

@app.route("/login")
def login():
    print(f'**** login {url_for("callback", _external=True)} ****')
    return oauth.auth0.authorize_redirect(
        redirect_uri=url_for("callback", _external=True)
    )

@app.route("/callback", methods=["GET", "POST"])
def callback():
    print("**** callback ****")
    token = oauth.auth0.authorize_access_token() # issue here
    session["user"] = token
    print("**** we got token ****")
    print(token)
    return redirect("/?token="+token['id_token'])

@app.route("/logout")
def logout():
    session.clear()
    return redirect(
        "https://" + DOMAIN
        + "/v2/logout?"
        + urlencode(
            {
                "returnTo": url_for("home", _external=True),
                "client_id": CLIENT_ID,
            },
            quote_via=quote_plus,
        )
    )

@app.errorhandler(AuthError)
def handle_auth_error(ex):
    response = jsonify(ex.error)
    response.status_code = ex.status_code
    return response


if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)
